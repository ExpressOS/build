#
# Create a virtual BUS named 'bus'
#
# This BUS is registerd in io's name space under the name 'bus'.
#

rtc => new System_bus()
{
  # Add the RTC (PNP0B00) as a virtual device
  rtc => wrap(hw-root.match("PNP0B00"));
}

con_bus => new System_bus()
{
  ps2 => wrap(hw-root.match("PNP0303"));
}

# Virtual bus for the fb-drv server
fb => new System_bus()
{
  # The BIOS memory regions to execute the VESA BIOS
  bios => wrap(hw-root.BIOS);

  # PIT (accessd by various VESA BIOSes)
  pit  => wrap(hw-root.match("PNP0100"));

  # used for IO delay on various VESA BIOSes
  p80  => wrap(hw-root.match("P80"));

  # Legacy VGA MMIO and I/O Ports
  vga  => wrap(hw-root.match("PNP0900"));

  # Use virtual PCI bus that keeps the physical bus structure
  # because the VESA BIOS may store the physical PCI address
  # when initialized by the host BIOS
  PCI0 => new PCI_bus_ident()
  {
    # Dummy device 0 on PCI bus 0 makes cirrus VESA BIOS happy
    host_bridge_dummy => new PCI_dummy_device();

    # Put all display devices on our virtual PCI bus PCI class code 0x03
    gfx[] => wrap(hw-root.match("PCI/CC_03"));
  }
}

android_bus => new System_bus()
{
  # Add a new virtual PCI root bridge
  PCI0 => new PCI_bus()
  {
    # Add all real PCI devices that match the CIDs to the virtual PCI bus
    # NOTE: PCI/CC_xx means PCI class code == xx.
    #       CC_01 => storage devices
    #       CC_02 => network devices
    #       CC_04 => multimedia devices
    #       CC_0c => serial bus devices (USB)
    pci[] => wrap(hw-root.match("PCI/CC_02,PCI/CC_04,PCI/CC_06,PCI/CC_0c"));
  }
}
